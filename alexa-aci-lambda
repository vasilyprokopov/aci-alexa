# -*- coding: utf-8 -*-

import logging

import requests

import ask_sdk_core.utils as ask_utils

from ask_sdk_core.skill_builder import SkillBuilder
from ask_sdk_core.dispatch_components import AbstractRequestHandler
from ask_sdk_core.dispatch_components import AbstractExceptionHandler
from ask_sdk_core.handler_input import HandlerInput

from ask_sdk_model import Response

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


class LaunchRequestHandler(AbstractRequestHandler):
    """Handler for Skill Launch."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool

        return ask_utils.is_request_type("LaunchRequest")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = "Welcome, you can say Hello or Help. Which would you like to try?"

        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )


class HelpIntentHandler(AbstractRequestHandler):
    """Handler for Help Intent."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name("AMAZON.HelpIntent")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = "You can say hello to me! How can I help?"

        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )


class CancelOrStopIntentHandler(AbstractRequestHandler):
    """Single handler for Cancel and Stop Intent."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return (ask_utils.is_intent_name("AMAZON.CancelIntent")(handler_input) or
                ask_utils.is_intent_name("AMAZON.StopIntent")(handler_input))

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = "Goodbye!"

        return (
            handler_input.response_builder
                .speak(speak_output)
                .response
        )


class SessionEndedRequestHandler(AbstractRequestHandler):
    """Handler for Session End."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_request_type("SessionEndedRequest")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response

        # Any cleanup logic goes here.

        return handler_input.response_builder.response


class IntentReflectorHandler(AbstractRequestHandler):
    """The intent reflector is used for interaction model testing and debugging.
    It will simply repeat the intent the user said. You can create custom handlers
    for your intents by defining them above, then also adding them to the request
    handler chain below.
    """
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_request_type("IntentRequest")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        intent_name = ask_utils.get_intent_name(handler_input)
        speak_output = "You just triggered " + intent_name + "."

        return (
            handler_input.response_builder
                .speak(speak_output)
                # .ask("add a reprompt if you want to keep the session open for the user to respond")
                .response
        )


class CatchAllExceptionHandler(AbstractExceptionHandler):
    """Generic error handling to capture any syntax or routing errors. If you receive an error
    stating the request handler chain is not found, you have not implemented a handler for
    the intent being invoked or included it in the skill builder below.
    """
    def can_handle(self, handler_input, exception):
        # type: (HandlerInput, Exception) -> bool
        return True

    def handle(self, handler_input, exception):
        # type: (HandlerInput, Exception) -> Response
        logger.error(exception, exc_info=True)

        speak_output = "Sorry, I had trouble doing what you asked. Please try again."

        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )


class GetHealthIntentHandler(AbstractRequestHandler):
    """Handler for ACI Get Health Intent."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name("GetHealthIntent")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        token, message = aaaLogin(apicUrl, apicUser, apicPassword)
        if token is not '':
            message = getHealth(apicUrl,token)
        
        speak_output = message

        return (
            handler_input.response_builder
                .speak(speak_output)
                # .ask("add a reprompt if you want to keep the session open for the user to respond")
                .response
        )


class GetControllersIntentHandler(AbstractRequestHandler):
    """Handler for ACI Get Controllers Intent."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name("GetControllersIntent")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        token, message = aaaLogin(apicUrl, apicUser, apicPassword)
        if token is not '':
            message = getControllers(apicUrl,token)
        
        speak_output = message

        return (
            handler_input.response_builder
                .speak(speak_output)
                # .ask("add a reprompt if you want to keep the session open for the user to respond")
                .response
        )


class GetNodesIntentHandler(AbstractRequestHandler):
    """Handler for ACI Get Nodes Intent."""
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name("GetNodesIntent")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        token, message = aaaLogin(apicUrl, apicUser, apicPassword)
        if token is not '':
            message = getNodes(apicUrl,token)
        
        speak_output = message

        return (
            handler_input.response_builder
                .speak(speak_output)
                # .ask("add a reprompt if you want to keep the session open for the user to respond")
                .response
        )


# Set of APIC functions
apicUrl = 'https://sandboxapicdc.cisco.com'
apicUser = 'admin'
apicPassword = 'ciscopsdt'

def aaaLogin(apicUrl, apicUser, apicPassword):
    # Function to log into APIC and get a token (DevCookie).
    # Function receives APIC URL, username and password and returnes a token and a message.
    data = {
        "aaaUser": {
            "attributes": {
            "name": apicUser,
            "pwd": apicPassword
            }
        }
    }
    
    url = apicUrl+'/api/mo/aaaLogin.json'
    
    response = requests.post(url, json=data, verify=False)
    
    if response.status_code == 200:
        token = response.json()['imdata'][0]['aaaLogin']['attributes']['token']
        message = 'Token received OK'
        return token, message
    else:
        errorCode = response.status_code
        errorMessage = response.json()['imdata'][0]['error']['attributes']['text']
        message = f'Error code: {errorCode}\n{errorMessage}'
        token = ''
        return token, message


def getHealth(apicUrl,token):
    # Function to get fabric health
    url = apicUrl+'/api/node/mo/topology/health.json'
    header = {'DevCookie': token}
    response = requests.get(url, headers=header, verify=False)
    
    if response.status_code == 200:
        health = response.json()['imdata'][0]['fabricHealthTotal']['attributes']['cur']
        message = f'Fabric health is {health} points out of 100.'
        return message
    else:
        errorCode = response.status_code
        errorMessage = response.json()['imdata'][0]['error']['attributes']['text']
        message = f'Error code: {errorCode}\n{errorMessage}'
        return message


def getControllers(apicUrl,token):
    # Function to get controller health
    url = apicUrl+'/api/node/class/infraWiNode.json'
    header = {'DevCookie': token}
    response = requests.get(url, headers=header, verify=False)
    
    if response.status_code == 200:
        message = ''
        for controller in response.json()['imdata']:
            nodeName = controller['infraWiNode']['attributes']['nodeName']
            operSt = controller['infraWiNode']['attributes']['operSt']
            health = controller['infraWiNode']['attributes']['health']
            message = message + f'Controller {nodeName} is {operSt} and {health}.\n'
        message = message + 'That\'s all your controllers.'
        return message
    else:
        errorCode = response.status_code
        errorMessage = response.json()['imdata'][0]['error']['attributes']['text']
        message = f'Error code: {errorCode}\n{errorMessage}'
        return message


def getNodes(apicUrl,token):
    # Function to get node health
    url = apicUrl+'/api/node/class/fabricNode.json'
    header = {'DevCookie': token}
    response = requests.get(url, headers=header, verify=False)
    
    if response.status_code == 200:
        message = ''
        for node in response.json()['imdata']:
            name = node['fabricNode']['attributes']['name']
            role = node['fabricNode']['attributes']['role']
            fabricSt = node['fabricNode']['attributes']['fabricSt']
            
            if not role == 'controller' and not fabricSt == 'active':
                message = message + f'Current operational status of {role} {name} is {fabricSt}.\n'
        
        if message == '':
            message = 'All leafs and spines are up and running.'
        
        return message
    else:
        errorCode = response.status_code
        errorMessage = response.json()['imdata'][0]['error']['attributes']['text']
        message = f'Error code: {errorCode}\n{errorMessage}'
        return message


# The SkillBuilder object acts as the entry point for your skill, routing all request and response
# payloads to the handlers above. Make sure any new handlers or interceptors you've
# defined are included below. The order matters - they're processed top to bottom.


sb = SkillBuilder()

sb.add_request_handler(LaunchRequestHandler())
sb.add_request_handler(GetHealthIntentHandler())
sb.add_request_handler(GetControllersIntentHandler())
sb.add_request_handler(GetNodesIntentHandler())
sb.add_request_handler(HelpIntentHandler())
sb.add_request_handler(CancelOrStopIntentHandler())
sb.add_request_handler(SessionEndedRequestHandler())
sb.add_request_handler(IntentReflectorHandler()) # make sure IntentReflectorHandler is last so it doesn't override your custom intent handlers

sb.add_exception_handler(CatchAllExceptionHandler())

lambda_handler = sb.lambda_handler()